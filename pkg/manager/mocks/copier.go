// Code generated by MockGen. DO NOT EDIT.
// Source: ./common.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileCopier is a mock of FileCopier interface.
type MockFileCopier struct {
	ctrl     *gomock.Controller
	recorder *MockFileCopierMockRecorder
}

// MockFileCopierMockRecorder is the mock recorder for MockFileCopier.
type MockFileCopierMockRecorder struct {
	mock *MockFileCopier
}

// NewMockFileCopier creates a new mock instance.
func NewMockFileCopier(ctrl *gomock.Controller) *MockFileCopier {
	mock := &MockFileCopier{ctrl: ctrl}
	mock.recorder = &MockFileCopierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileCopier) EXPECT() *MockFileCopierMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockFileCopier) Copy(src, dst string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", src, dst)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockFileCopierMockRecorder) Copy(src, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFileCopier)(nil).Copy), src, dst)
}

// GetMatches mocks base method.
func (m *MockFileCopier) GetMatches(copyPat []string, dir string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatches", copyPat, dir)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatches indicates an expected call of GetMatches.
func (mr *MockFileCopierMockRecorder) GetMatches(copyPat, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatches", reflect.TypeOf((*MockFileCopier)(nil).GetMatches), copyPat, dir)
}
